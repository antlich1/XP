using System;
using SharedLib.Commands;
using System.Net.Sockets;

namespace SharedLib.Dispatcher.Exceptions
{
    #region DispatcherOperationExceptionBase
    /// <summary>
    /// Dispatcher exception base.
    /// </summary>
    public abstract class DispatcherOperationExceptionBase : Exception
    {
        #region Constructor

        public DispatcherOperationExceptionBase(string message)
            : base(message)
        { }

        public DispatcherOperationExceptionBase() : base() { }

        public DispatcherOperationExceptionBase(string message, System.Exception inner) : base(message, inner) { }

        protected DispatcherOperationExceptionBase(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion

        #region Properties

        /// <summary>
        /// Gets if InnerException is SocketException.
        /// </summary>
        public bool IsSocketException
        {
            get
            {
                return (InnerException != null &&
                InnerException is SocketException) ||
                InnerException != null && InnerException.InnerException != null &&
                InnerException.InnerException is SocketException ||
                InnerException != null && InnerException.InnerException != null && InnerException.InnerException.InnerException != null &&
                InnerException.InnerException.InnerException is SocketException;
            }
        }

        #endregion
    }
    #endregion

    #region DispatcherException
    /// <summary>
    /// Dispatcher exception.
    /// </summary>
    [Serializable]
    public class DispatcherException : DispatcherOperationExceptionBase
    {
        #region Fields
        [NonSerialized()]
        private IMessageDispatcher dispatcher;
        #endregion

        #region Constructor

        public DispatcherException(IMessageDispatcher dispatcher, string message, Exception inner)
            : base(message, inner)
        {
            #region Validation
            if (dispatcher == null)
                throw new ArgumentNullException("Dispatcher", "Dispatcher may not be null.");
            #endregion

            Dispatcher = dispatcher;
        }

        public DispatcherException(IMessageDispatcher dispatcher, string message)
            : this(dispatcher, message, null)
        { }

        public DispatcherException() : base() { }

        public DispatcherException(string message, System.Exception inner) : base(message, inner) { }

        protected DispatcherException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }
        #endregion

        #region Properties

        /// <summary>
        /// Gets the dispatcher instance exception occurred on.
        /// </summary>
        public IMessageDispatcher Dispatcher
        {
            get { return dispatcher; }
            protected set { dispatcher = value; }
        }

        #endregion
    }
    #endregion

    #region OperationException
    /// <summary>
    /// Occours when operation code throws an exception.
    /// </summary>
    [Serializable]
    public class OperationException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public OperationException()
        {
        }

        public OperationException(string message)
            : base(message)
        { }

        public OperationException(string message, Exception inner)
            : base(message, inner)
        { }

        protected OperationException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion
    }
    #endregion

    #region OperationTimeoutException
    /// <summary>
    /// Occours when a synchronous request times out.
    /// <remarks>This doesnt mean that the operation has failed nor that it will be removed from queue. The error is generated by the calling party itself.</remarks>
    /// </summary>
    [Serializable]
    public class OperationTimeoutException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public OperationTimeoutException(string message, double timeout)
            : base(message)
        {
            Timeout = timeout;
        }

        public OperationTimeoutException(string message, double timeout, IDispatcherCommand command) : this(message, timeout)
        {
            Command = command ?? throw new ArgumentNullException(nameof(command));
        }

        public OperationTimeoutException(string message)
            : base(message)
        { }

        public OperationTimeoutException() : base() { }

        public OperationTimeoutException(string message, System.Exception inner) : base(message, inner) { }

        protected OperationTimeoutException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion

        #region Properties

        /// <summary>
        /// Gets the timeout value for the exception. 
        /// </summary>
        public double Timeout
        {
            get;
            protected set;
        }

        /// <summary>
        /// Gets or sets command.
        /// </summary>
        public IDispatcherCommand Command
        {
            get; protected set;
        }

        #endregion
    }
    #endregion

    #region InvalidParametersException
    /// <summary>
    /// Occours when invalid parameters are passed by request command.
    /// </summary>
    [Serializable]
    public class InvalidParametersException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public InvalidParametersException(string parametername, string message = "Operation parameters are invalid.")
            : base(message)
        {
            ParameterName = parametername;
        }

        public InvalidParametersException(string message)
            : base(message)
        { }

        public InvalidParametersException() : base() { }

        public InvalidParametersException(string message, System.Exception inner) : base(message, inner) { }

        protected InvalidParametersException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion

        #region Properties
        /// <summary>
        /// Gets the parameter name.
        /// </summary>
        public string ParameterName
        {
            get;
            set;
        }
        #endregion
    }
    #endregion

    #region ConnectionLostException
    /// <summary>
    /// Occours when an outstanding request is aborted due disconnection.
    /// </summary>
    [Serializable]
    public class ConnectionLostException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public ConnectionLostException(string message)
            : base(message)
        { }

        public ConnectionLostException()
            : base()
        { }

        public ConnectionLostException(string message, System.Exception inner)
            : base(message, inner)
        { }

        protected ConnectionLostException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion
    }
    #endregion

    #region OperationNotSupportedException
    /// <summary>
    /// This exeception occours when operation is not supported.
    /// </summary>
    [Serializable]
    public class OperationNotSupportedException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public OperationNotSupportedException(string message)
            : base(message)
        { }

        public OperationNotSupportedException() : base() { }

        public OperationNotSupportedException(string message, System.Exception inner) : base(message, inner) { }

        protected OperationNotSupportedException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context) { }

        #endregion
    }
    #endregion

    #region CommandUnrecognized
    /// <summary>
    /// This exeception occours when command is not recognized.
    /// </summary>
    [Serializable]
    public class CommandUnrecognizedException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public CommandUnrecognizedException(string message, IDispatcherCommand cmd)
            : base(message)
        {
            Command = cmd;
        }

        public CommandUnrecognizedException() : base() { }

        public CommandUnrecognizedException(string message, System.Exception inner) { }

        protected CommandUnrecognizedException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context) { }

        #endregion

        #region Properties
        /// <summary>
        /// Gets the instance of the command.
        /// </summary>
        public IDispatcherCommand Command
        {
            get;
            protected set;
        }
        #endregion
    }
    #endregion

    #region RequestNotFoundException
    /// <summary>
    /// This exception occours when the replying party was not able to find the request.
    /// <remarks>The reason for the exception to occour can be an invalid command id or an attempt to access the command that was already removed from queue.</remarks>
    /// </summary>
    [Serializable()]
    public class RequestNotFoundException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public RequestNotFoundException(string message)
            : base(message)
        { }

        public RequestNotFoundException()
            : base()
        { }

        public RequestNotFoundException(string message, System.Exception inner)
            : base(message, inner)
        { }

        protected RequestNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion
    }
    #endregion

    #region UnhandledOperationException
    /// <summary>
    /// This exeception occours when operation code has failde to handle an exception.
    /// </summary>
    [Serializable]
    public class UnhandledOperationException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public UnhandledOperationException(Exception inner)
            : base("Operation exception was not handeled.", inner)
        {
        }

        public UnhandledOperationException(string message)
            : base(message)
        { }

        public UnhandledOperationException() : base() { }

        public UnhandledOperationException(string message, System.Exception inner)
            : base(message, inner)
        { }

        protected UnhandledOperationException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion
    }
    #endregion

    #region PoolDispatchFailedException
    [Serializable()]
    public class PoolDispatchFailedException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public PoolDispatchFailedException(Exception inner)
            : base("Operation exception was not handeled.", inner)
        {
        }

        public PoolDispatchFailedException(string message)
            : base(message)
        { }

        public PoolDispatchFailedException() : base() { }

        public PoolDispatchFailedException(string message, System.Exception inner)
            : base(message, inner)
        { }

        protected PoolDispatchFailedException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion
    }
    #endregion

    #region PoolProcessFailedException
    [Serializable()]
    public class PoolProcessFailedException : DispatcherOperationExceptionBase
    {
        #region Constructor

        public PoolProcessFailedException(Exception inner)
            : base("Operation exception was not handeled.", inner)
        {
        }

        public PoolProcessFailedException(string message)
            : base(message)
        { }

        public PoolProcessFailedException() : base() { }

        public PoolProcessFailedException(string message, System.Exception inner)
            : base(message, inner)
        { }

        protected PoolProcessFailedException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion
    }
    #endregion

    #region AccessDeniedException
    [Serializable()]
    public class AccessDeniedException : Exception
    {
        #region Constructor

        public AccessDeniedException(Exception inner)
            : base("Access denied.", inner)
        {
        }

        public AccessDeniedException(string message)
            : base(message)
        { }

        public AccessDeniedException() : base() { }

        public AccessDeniedException(string message, Exception inner)
            : base(message, inner)
        { }

        protected AccessDeniedException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        { }

        #endregion
    }
    #endregion
}
